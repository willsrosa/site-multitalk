-- Migration: Create Full System (Idempotent)
-- This script sets up the entire database schema for the application,
-- including roles, tables for blog, contacts, and the affiliate/kanban system.
-- It is designed to be safely re-runnable (idempotent).

-- ========= 1. CREATE CUSTOM TYPES (IF NOT EXISTS) =========

/*
  ## Operation: Create Custom Type 'user_role'
  [Creates a custom type for user roles to distinguish between superadmins and affiliates.]
  - Schema-Category: "Structural"
  - Impact-Level: "Low"
  - Reversible: false (requires manual drop)
*/
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role') THEN
        CREATE TYPE public.user_role AS ENUM ('superadmin', 'affiliate');
        RAISE NOTICE 'âœ… Type "user_role" created.';
    ELSE
        RAISE NOTICE 'ðŸ”µ Type "user_role" already exists, skipping.';
    END IF;
END$$;

/*
  ## Operation: Create Custom Type 'kanban_status'
  [Creates a custom type for the different stages of a lead in the Kanban board.]
  - Schema-Category: "Structural"
  - Impact-Level: "Low"
  - Reversible: false (requires manual drop)
*/
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'kanban_status') THEN
        CREATE TYPE public.kanban_status AS ENUM ('Nova Lead', 'Em Atendimento', 'ReuniÃ£o', 'Ganho', 'Perca');
        RAISE NOTICE 'âœ… Type "kanban_status" created.';
    ELSE
        RAISE NOTICE 'ðŸ”µ Type "kanban_status" already exists, skipping.';
    END IF;
END$$;


-- ========= 2. CREATE TABLES (IF NOT EXISTS) =========

/*
  ## Operation: Create Table 'profiles'
  [Stores user profile data, linked to Supabase auth, including their role.]
  - Schema-Category: "Structural"
  - Impact-Level: "Medium"
  - Reversible: true (DROP TABLE)
*/
CREATE TABLE IF NOT EXISTS public.profiles (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references auth.users(id) on delete cascade not null unique,
  username text unique not null check (char_length(username) >= 3),
  full_name text,
  avatar_url text,
  role public.user_role default 'affiliate' not null,
  updated_at timestamptz default now()
);
COMMENT ON TABLE public.profiles IS 'Stores public profile information for each user.';


/*
  ## Operation: Create Table 'leads'
  [Stores lead information for the affiliate Kanban board.]
  - Schema-Category: "Structural"
  - Impact-Level: "Medium"
  - Reversible: true (DROP TABLE)
*/
CREATE TABLE IF NOT EXISTS public.leads (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  email text not null,
  company text,
  message text not null,
  status public.kanban_status default 'Nova Lead' not null,
  profile_id uuid references public.profiles(id) on delete cascade not null,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);
COMMENT ON TABLE public.leads IS 'Stores leads generated by affiliates for the Kanban board.';


/*
  ## Operation: Create Table 'authors'
  [Stores blog post author information.]
  - Schema-Category: "Structural"
  - Impact-Level: "Low"
  - Reversible: true (DROP TABLE)
*/
CREATE TABLE IF NOT EXISTS public.authors (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references auth.users(id) on delete set null,
  name text not null unique,
  bio text,
  avatar_url text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);
COMMENT ON TABLE public.authors IS 'Stores information about blog post authors.';


/*
  ## Operation: Create Table 'categories'
  [Stores blog post categories.]
  - Schema-Category: "Structural"
  - Impact-Level: "Low"
  - Reversible: true (DROP TABLE)
*/
CREATE TABLE IF NOT EXISTS public.categories (
  id uuid primary key default gen_random_uuid(),
  name text not null unique,
  slug text not null unique,
  description text,
  color text default '#60a5fa' not null,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);
COMMENT ON TABLE public.categories IS 'Stores categories for organizing blog posts.';


/*
  ## Operation: Create Table 'posts'
  [Stores all blog post data.]
  - Schema-Category: "Structural"
  - Impact-Level: "High"
  - Reversible: true (DROP TABLE)
*/
CREATE TABLE IF NOT EXISTS public.posts (
  id uuid primary key default gen_random_uuid(),
  title text not null,
  slug text not null unique,
  excerpt text not null,
  content text not null,
  featured_image text,
  meta_title text,
  meta_description text,
  meta_keywords text,
  author_id uuid references public.authors(id) on delete set null,
  category_id uuid references public.categories(id) on delete set null,
  status text default 'draft'::text not null,
  featured boolean default false not null,
  read_time integer default 5 not null,
  views integer default 0 not null,
  published_at timestamptz,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);
COMMENT ON TABLE public.posts IS 'Stores all blog posts content and metadata.';


/*
  ## Operation: Create Table 'contacts'
  [Stores messages from the main contact form.]
  - Schema-Category: "Structural"
  - Impact-Level: "Medium"
  - Reversible: true (DROP TABLE)
*/
CREATE TABLE IF NOT EXISTS public.contacts (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  email text not null,
  company text,
  message text not null,
  created_at timestamptz default now()
);
COMMENT ON TABLE public.contacts IS 'Stores submissions from the general contact form.';


-- ========= 3. CREATE FUNCTIONS & TRIGGERS (IF NOT EXISTS) =========

/*
  ## Operation: Create Function 'create_user_profile'
  [Trigger function to automatically create a profile when a new user signs up.]
  - Schema-Category: "Functions"
  - Impact-Level: "Medium"
  - Reversible: true (DROP FUNCTION)
*/
CREATE OR REPLACE FUNCTION public.create_user_profile()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (user_id, username, full_name, avatar_url)
  VALUES (
    NEW.id,
    NEW.raw_user_meta_data->>'user_name',
    NEW.raw_user_meta_data->>'full_name',
    NEW.raw_user_meta_data->>'avatar_url'
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
COMMENT ON FUNCTION public.create_user_profile() IS 'Automatically creates a user profile upon new user registration in auth.users.';

/*
  ## Operation: Create Trigger 'on_auth_user_created'
  [Attaches the profile creation function to the auth.users table.]
  - Schema-Category: "Triggers"
  - Impact-Level: "Medium"
  - Reversible: true (DROP TRIGGER)
*/
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.create_user_profile();


-- ========= 4. ENABLE RLS & CREATE POLICIES =========

-- Profiles Table
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Profiles are viewable by everyone." ON public.profiles;
CREATE POLICY "Profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);
DROP POLICY IF EXISTS "Users can insert their own profile." ON public.profiles;
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = user_id);
DROP POLICY IF EXISTS "Users can update their own profile." ON public.profiles;
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = user_id);

-- Leads Table
ALTER TABLE public.leads ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Affiliates can view their own leads." ON public.leads;
CREATE POLICY "Affiliates can view their own leads." ON public.leads FOR SELECT USING (profile_id = (SELECT id FROM public.profiles WHERE user_id = auth.uid()));
DROP POLICY IF EXISTS "Anyone can insert a lead." ON public.leads;
CREATE POLICY "Anyone can insert a lead." ON public.leads FOR INSERT WITH CHECK (true);
DROP POLICY IF EXISTS "Affiliates can update their own leads." ON public.leads;
CREATE POLICY "Affiliates can update their own leads." ON public.leads FOR UPDATE USING (profile_id = (SELECT id FROM public.profiles WHERE user_id = auth.uid()));

-- Posts Table
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Posts are public." ON public.posts;
CREATE POLICY "Posts are public." ON public.posts FOR SELECT USING (status = 'published');
DROP POLICY IF EXISTS "Superadmins can manage all posts." ON public.posts;
CREATE POLICY "Superadmins can manage all posts." ON public.posts FOR ALL USING ((SELECT role FROM public.profiles WHERE user_id = auth.uid()) = 'superadmin'::public.user_role);

-- Authors Table
ALTER TABLE public.authors ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Authors are public." ON public.authors;
CREATE POLICY "Authors are public." ON public.authors FOR SELECT USING (true);

-- Categories Table
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Categories are public." ON public.categories;
CREATE POLICY "Categories are public." ON public.categories FOR SELECT USING (true);

-- Contacts Table
ALTER TABLE public.contacts ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Anyone can insert a contact message." ON public.contacts;
CREATE POLICY "Anyone can insert a contact message." ON public.contacts FOR INSERT WITH CHECK (true);
DROP POLICY IF EXISTS "Superadmins can view contact messages." ON public.contacts;
CREATE POLICY "Superadmins can view contact messages." ON public.contacts FOR SELECT USING ((SELECT role FROM public.profiles WHERE user_id = auth.uid()) = 'superadmin'::public.user_role);

RAISE NOTICE 'âœ… Migration script completed successfully.';
